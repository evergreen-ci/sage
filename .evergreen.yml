command_type: test

modules:
  - name: evergreen
    owner: evergreen-ci
    repo: evergreen
    branch: main
    auto_update: true

ignore:
  - "*.md"
  - ".github/*"

pre:
  - func: assume-ec2-role
  - func: get-project
  - func: setup-node
  - func: yarn-install
post:
  - func: assume-ec2-role
  - func: attach-mongod-logs
  - func: attach-test-results

buildvariants:
  - name: ubuntu2204-small
    display_name: Ubuntu 22.04
    run_on:
      - ubuntu2204-small
    expansions:
      mongodb_tools_url: https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.11.0.tgz
      mongodb_url_2204: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-8.0.4.tgz
      mongosh_url_2204: https://downloads.mongodb.com/compass/mongosh-2.3.1-linux-x64.tgz
      node_version: 22.14.0
      goroot: /opt/golang/go1.24
    modules:
      - evergreen
    tasks:
      - name: compile
      - name: lint
      - name: test
      - name: e2e
      - name: evergreen-evals
      - name: question-classifier-evals
      - name: log-analyzer-workflow-evals
      - name: check-mastra-dev-startup
      - name: check-sage-prod-startup
    display_tasks:
      - name: evals
        execution_tasks:
          - "evergreen-evals"
          - "question-classifier-evals"
          - "log-analyzer-workflow-evals"
tasks:
  - name: compile
    commands:
      - func: yarn-build
  - name: lint
    commands:
      - func: yarn-lint
  - name: test
    commands:
      - func: yarn-test
  - name: e2e
    commands:
      - func: setup-mongodb
      - func: run-make-background
        vars:
          target: local-evergreen
      - func: symlink
      - func: yarn-build
      - func: wait-for-evergreen
      - func: yarn-e2e
  - name: evergreen-evals
    commands:
      - func: setup-mongodb
      - func: run-make-background
        vars:
          target: local-evergreen
      - func: wait-for-evergreen
      - func: yarn-eval
        vars:
          eval_dir: evergreenAgent
      - func: attach-braintrust-results
        vars:
          xml_file_name: evergreen_evals.xml
  - name: question-classifier-evals
    commands:
      - func: yarn-eval
        vars:
          eval_dir: questionClassifierAgent
      - func: attach-braintrust-results
        vars:
          xml_file_name: question_classifier_evals.xml
  - name: log-analyzer-workflow-evals
    commands:
      - func: yarn-eval
        vars:
          eval_dir: logAnalyzerWorkflow
      - func: attach-braintrust-results
        vars:
          xml_file_name: log_analyzer_workflow_evals.xml
  - name: check-mastra-dev-startup
    commands:
      - func: yarn-build
      - func: mastra-dev-startup
  - name: check-sage-prod-startup
    commands:
      - func: yarn-build
      - func: sage-prod-startup

functions:
  attach-test-results:
    command: attach.xunit_results
    params:
      files:
        - "./sage/bin/test/*.xml"

  attach-braintrust-results:
    command: attach.xunit_results
    params:
      files:
        - ./sage/bin/${xml_file_name}

  attach-mongod-logs:
    command: s3.put
    type: system
    params:
      aws_key: ${AWS_ACCESS_KEY_ID}
      aws_secret: ${AWS_SECRET_ACCESS_KEY}
      aws_session_token: ${AWS_SESSION_TOKEN}
      local_file: "sage/evergreen/bin/mongod-logs.txt"
      remote_file: ${build_variant}/${task_id}/${execution}/mongod-logs.txt
      bucket: evg-bucket-sage
      content_type: text/plain
      permissions: public-read
      display_name: mongod-logs

  assume-ec2-role:
    command: ec2.assume_role
    params:
      role_arn: ${ASSUME_ROLE_ARN}

  get-project:
    command: git.get_project
    type: setup
    params:
      directory: sage
      shallow_clone: true

  health-check:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        ./scripts/health-check.sh

  run-make-background:
    command: subprocess.exec
    params:
      working_dir: sage/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      background: true
      env:
        SETTINGS_OVERRIDE: file
        GOROOT: ${goroot}

  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGODB_URL: ${mongodb_url_2204}
          MONGODB_DECOMPRESS: ${decompress}
        working_dir: sage/evergreen
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        env:
          gobin: ${goroot}/bin/go
          MONGOSH_URL: ${mongosh_url_2204}
          MONGOSH_DECOMPRESS: ${decompress}
        working_dir: sage/evergreen
        command: make get-mongosh
    - command: shell.exec
      type: setup
      params:
        background: true
        # Turn off silent to enable DB logging for debugging purposes
        silent: true
        working_dir: sage/evergreen
        shell: bash
        script: | 
          mkdir -p bin
          make start-mongod > bin/mongod-logs.txt 2>&1
    - command: subprocess.exec
      type: setup
      params:
        working_dir: sage/evergreen
        command: make configure-mongod
    - command: shell.exec
      type: setup
      params:
        shell: bash
        script: |
          ${PREPARE_SHELL}
          cd $PROJECT_DIRECTORY
          mkdir mongodb-tools && cd mongodb-tools
          curl ${mongodb_tools_url} -o mongodb-tools.tgz
          ${decompress} mongodb-tools.tgz
          mv ./mongodb-*/bin/* .
  
  setup-node:
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - sage/.evergreen/scripts/prepare-shell.sh
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        exec_timeout_secs: 60
        shell: bash
        script: |
          ${PREPARE_SHELL}

          # Fetch NVM and install it into this task's .nvm directory
          # Once downloaded, source nvm and install yarn
          git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
          cd "$NVM_DIR"
          git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          cd -

          # Retry the download for Node in case it flakes.
          for i in {1..5}; do
            nvm install --no-progress --default ${node_version}
            [[ $? -eq 0 ]] && break
            echo "Attempt $i of 5 to install Node failed"
            sleep 10
          done
          npm install -g yarn
          npm install -g env-cmd

  symlink:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ln -s ${workdir}/evergreen/graphql/schema ${workdir}/sdlschema

  wait-for-evergreen:
    command: shell.exec
    type: setup
    params:
      exec_timeout_secs: 600
      working_dir: sage
      script: ./scripts/wait-for-evergreen.sh

  yarn-build:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn build

  yarn-install:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn install
  
  yarn-lint:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn eslint:strict

  yarn-start:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn start

  yarn-e2e:
    command: shell.exec
    params:
      env:
        AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
        AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn e2e

  yarn-test:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        yarn test

  yarn-eval:
    command: shell.exec
    params:
      working_dir: sage
      env:
        AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
        AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
        BRAINTRUST_API_KEY: ${BRAINTRUST_API_KEY}
        EVAL_DIR: ${eval_dir}
      shell: bash
      script: |
        ${PREPARE_SHELL}
        .evergreen/scripts/publish-evals.sh

  mastra-dev-startup:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        ./scripts/mastra-dev-startup.sh

  sage-prod-startup:
    command: shell.exec
    params:
      working_dir: sage
      shell: bash
      script: |
        ${PREPARE_SHELL}
        ./scripts/sage-prod-startup.sh
